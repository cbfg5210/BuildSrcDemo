/**
 * 如果文件夹不存在则创建
 * @param path 文件夹路径
 */
def createDirIfNotExist = { String path ->
    File dirFile = new File(path)
    if (!dirFile.exists()) {
        dirFile.mkdirs()
    }
}

/**
 * 写入内容到文件中
 * @param path
 * @param content
 */
def writeToFile = { String path, String content ->
    File file = new File(path)
    if (!file.exists()) {
        file.createNewFile()
    }
    file.withPrintWriter("utf-8", { writer ->
        writer.print(content)
        writer.flush()
    })
}

/**
 * 使用模板z_dir/template_module创建模块
 *
 * 执行方法1(推荐): 在gradle task列表面板点击'Run Gradle Task'按钮,在'Gradle Project'栏选中buildSrc模块,在'Command line'栏输入'createModule -PmName=$mName -Pdesc=$desc', 然后点击'OK';
 * 执行方法2、在Terminal输入'gradlew createModule -PmName=$mName -Pdesc=$desc'然后执行
 */
task("createModule") {
    doLast {
        if (!project.hasProperty("mName")) {
            logger.error("task stopped,请输入模块名")
            return
        }

        //settings.gradle中include方法中的模块名
        String mName = project.property("mName")
        if (!mName.startsWith(":")) {
            mName = ":$mName"
        }

        String projectPath = rootDir.parent
        String[] parts = mName.split(":")
        //模块的文件夹名
        String moduleName
        //模块的路径
        String targetDir

        if (parts.length == 2) {
            moduleName = parts[1]
            targetDir = "$projectPath/$moduleName"
        } else {
            moduleName = parts[2]
            targetDir = "$projectPath/${parts[1]}/$moduleName"
        }

        String desc
        if (project.hasProperty("desc")) {
            desc = project.property("desc")
        } else {
            desc = "模块说明:"
        }

        logger.error("mName=$mName,desc=$desc")

        /*
         * 创建模块文件夹
         */
        File targetDirFile = new File(targetDir)
        if (targetDirFile.exists()) {
            logger.error("task stopped,目标文件夹已存在:$targetDir")
            return
        }
        targetDirFile.mkdirs()

        /*
         * 生成build.gradle
         */
        String buildGradleContent = new StringBuilder()
                .append("applyPlugin(project, false)\n\n")
                .append("android {\n")
                .append("    compileSdkVersion Versions.compileSdk\n\n")
                .append("    defaultConfig {\n")
                .append("        targetSdkVersion Versions.targetSdk\n")
                .append("        minSdkVersion Versions.minSdk\n\n")
                .append("        //resourcePrefix \"lib_\"\n")
                .append("    }\n\n")
                .append("    compileOptions {\n")
                .append("        sourceCompatibility JavaVersion.VERSION_1_8\n")
                .append("        targetCompatibility JavaVersion.VERSION_1_8\n")
                .append("    }\n\n")
                .append("    //用java1.8编译kotlin\n")
                .append("    kotlinOptions {\n")
                .append("        jvmTarget = '1.8'\n")
                .append("    }\n")
                .append("}\n\n")
                .append("repositories {\n")
                .append("    flatDir {\n")
                .append("        //aar目录\n")
                .append("        dirs 'libs'\n")
                .append("    }\n")
                .append("}\n\n")
                .append("dependencies {\n")
                .append("    addDefDeps(it)\n")
                .append("    implementation Deps.appcompat\n")
                .append("    implementation Deps.kotlinStdlibJdk8\n")
                .append("}\n")
                .toString()

        writeToFile("$targetDir/build.gradle", buildGradleContent)

        //生成.gitignore
        writeToFile("$targetDir/.gitignore", "/build")

        //创建java文件夹: src/main/java/com/$moduleName
        createDirIfNotExist("$targetDir/src/main/java/com/$moduleName")

        //创建res/layout文件夹：src/main/res/layout
        createDirIfNotExist("$targetDir/src/main/res/layout")

        //创建res/values文件夹：src/main/res/values
        createDirIfNotExist("$targetDir/src/main/res/values")

        //创建res/drawable文件夹：src/main/res/drawable
        createDirIfNotExist("$targetDir/src/main/res/drawable")

        /*
        //创建res/drawable-{x}dpi文件夹：src/main/res/drawable-{x}dpi
        createDirIfNotExist("$targetDir/src/main/res/drawable-nodpi")
        createDirIfNotExist("$targetDir/src/main/res/drawable-hdpi")
        createDirIfNotExist("$targetDir/src/main/res/drawable-mdpi")
        createDirIfNotExist("$targetDir/src/main/res/drawable-xhdpi")
        createDirIfNotExist("$targetDir/src/main/res/drawable-xxhdpi")
        createDirIfNotExist("$targetDir/src/main/res/drawable-xxxhdpi")
        */

        //创建res/mipmap-{x}dpi文件夹：src/main/res/mipmap-{x}dpi
        createDirIfNotExist("$targetDir/src/main/res/mipmap-nodpi")
        createDirIfNotExist("$targetDir/src/main/res/mipmap-hdpi")
        createDirIfNotExist("$targetDir/src/main/res/mipmap-mdpi")
        createDirIfNotExist("$targetDir/src/main/res/mipmap-xhdpi")
        createDirIfNotExist("$targetDir/src/main/res/mipmap-xxhdpi")
        createDirIfNotExist("$targetDir/src/main/res/mipmap-xxxhdpi")

        /*
         * 创建AndroidManifest.xml
         */
        String manifestContent = new StringBuilder()
                .append("<?xml version=\"1.0\" encoding=\"utf-8\"?>\n")
                .append("<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n")
                .append("          package=\"com.$moduleName\">\n")
                .append("    <application>\n")
                .append("    </application>\n")
                .append("</manifest>")
                .toString()

        writeToFile("$targetDir/src/main/AndroidManifest.xml", manifestContent)

        /*
         * 在settings.gradle加入模块
         */
        //如果这样写会出错：File settingsGradle = file("$projectPath/settings.gradle")
        File settingsGradle = new File("$projectPath/settings.gradle")

        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(settingsGradle), "utf-8"))
        String tmp
        StringBuilder sb = new StringBuilder()
        boolean hasIncludeModule = false

        while ((tmp = reader.readLine()) != null) {
            sb.append(tmp).append("\n")

            if (!hasIncludeModule && tmp.contains("include") && !tmp.trim().startsWith("//")) {
                sb.append("         //")
                        .append(desc)
                        .append("\n")
                        .append("         '$mName'")

                if (tmp.indexOf("',") != -1) sb.append(",")
                sb.append("\n")
                hasIncludeModule = true
            }
        }
        reader.close()

        writeToFile("$projectPath/settings.gradle", sb.toString())
    }
}