//add repositories
ext.addRepos = { RepositoryHandler handler ->
    //项目gradle插件版本低可能造成的问题：Failed to resolve: com.android.support.xxx:25.4.0
    //解决：把以下一句加到根路径build.gradle的allprojects中repositories的第一行(在jcenter之前)：maven {url "https://maven.google.com"}
    handler.google()
    handler.jcenter()
    handler.maven { url 'https://jitpack.io' }
}

/**
 * build.gradle应用插件
 * @param project 目标模块
 * @param isApp true：application，false：library
 * @return
 */
ext.applyPlugin = { Project project, boolean isApp ->
    if (isApp) {
        project.plugins.apply('com.android.application')
        project.plugins.apply('app-joint')
    } else {
        project.plugins.apply('com.android.library')
    }
    project.plugins.apply('kotlin-android')
    project.plugins.apply('kotlin-android-extensions')
    project.plugins.apply('kotlin-kapt')
}

/**
 * 添加默认的依赖
 */
ext.addDefDeps = { DependencyHandler handler ->
    handler.add('implementation', fileTree(include: ['*.jar'], dir: 'libs'))
    handler.add('testImplementation', Deps.junit)
    handler.add('androidTestImplementation', Deps.runner)
    handler.add('androidTestImplementation', Deps.espresso)
}

/**
 * implementation方式引入依赖
 * @param deps 依赖库路径
 * @return
 */
ext.implementation2 = { DependencyHandler handler, String... deps ->
    for (int i = 0; i < deps.length; i++) {
        handler.add('implementation', deps[i])
    }
}

/**
 * implementation方式引入依赖以及编译库
 * @param dep 依赖库路径
 * @return
 */
ext.implementation3 = { DependencyHandler handler, String libDep, String compilerDep ->
    handler.add('implementation', libDep)
    handler.add('annotationProcessor', compilerDep)
}

/**
 * implementation方式引入依赖以及编译库
 * @param dep 依赖库路径
 * @return
 */
ext.kaptImplementation3 = { DependencyHandler handler, String libDep, String compilerDep ->
    handler.add('implementation', libDep)
    handler.add('kapt', compilerDep)
}

/**
 * api方式引入依赖
 * @param dep 依赖库路径
 * @return
 */
ext.api2 = { DependencyHandler handler, String... deps ->
    for (int i = 0; i < deps.length; i++) {
        handler.add('api', deps[i])
    }
}

/**
 * api方式引入依赖以及编译库
 * @param dep 依赖库路径
 * @return
 */
ext.api3 = { DependencyHandler handler, String libDep, String compilerDep ->
    handler.add('api', libDep)
    handler.add('annotationProcessor', compilerDep)
}

/**
 * api方式引入依赖以及编译库
 * @param dep 依赖库路径
 * @return
 */
ext.kaptApi3 = { DependencyHandler handler, String libDep, String compilerDep ->
    handler.add('api', libDep)
    handler.add('kapt', compilerDep)
}

/**
 * debugImplementation方式引入依赖
 * @param deps 依赖库路径
 * @return
 */
ext.debugImplementation2 = { DependencyHandler handler, String... deps ->
    for (int i = 0; i < deps.length; i++) {
        handler.add('debugImplementation', deps[i])
    }
}

/**
 * debugImplementation方式引入依赖以及编译库
 * @param dep 依赖库路径
 * @return
 */
ext.debugImplementation3 = { DependencyHandler handler, String libDep, String compilerDep ->
    handler.add('debugImplementation', libDep)
    handler.add('kapt', compilerDep)
}

/**
 * 引入Retrofit依赖库
 * @param isImplementation 是否引入
 * @return
 */
ext.implementationRetrofit = { DependencyHandler handler ->
    //Retrofit
    handler.add('implementation', Deps.retrofit2)
    handler.add('implementation', Deps.retrofit2AdapterRxJava2)
    handler.add('implementation', Deps.rxAndroid2)
    handler.add('implementation', Deps.retrofit2ConverterGson)
    handler.add('implementation', Deps.retrofit2ConverterScalars)
    //OkHttp
    handler.add('implementation', Deps.okHttp3)
    handler.add('implementation', Deps.okHttp3LoggingInterceptor)
    //RetrofitUrlManager
    handler.add('implementation', Deps.retrofitUrlManager)
}